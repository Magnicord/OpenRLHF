[project]
name = "openrlhf"
description = "OpenRLHF: A Ray-based High-performance RLHF framework"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.10"
dynamic = ["version"]
dependencies=[
    "accelerate",
    "bitsandbytes",
    "datasets",
    "deepspeed==0.17.4",
    "einops",
    "flash-attn==2.8.2",
    "grpcio>=1.74.0",
    "isort",
    "jsonlines",
    "loralib",
    "optimum",
    "optree>=0.13.0",
    "packaging",
    "peft",
    "pynvml>=12.0.0",
    # "ray[default]==2.48.0",
    "ray[default]", # conflict with torch2.6.0+cu124
    "tensorboard",
    "torch",
    "torchdata",
    "torchmetrics",
    "tqdm",
    "transformers==4.54.1",
    "transformers_stream_generator",
    "wandb",
    "wheel",
]

[project.optional-dependencies]
# vllm = ["vllm==0.10.0"]
# vllm_latest = ["vllm>0.10.0"]
ring = ["ring_flash_attn"]
liger = ["liger_kernel"]

[tool.setuptools.dynamic]
version = {file = "version.txt"}

[build-system]
requires = [
    "packaging",
    "setuptools >= 49.4.0",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.isort]
profile = "black"  # black-compatible
line_length = 119  # should match black parameters
ignore_whitespace = true  # ignore whitespace for compatibility with the initial style
py_version = 310  # python 3.10 as a target version
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
extend_skip = ["setup.py", "docs/source/conf.py"]


[tool.black]
line_length = 119

[tool.ruff]
line-length = 119

[tool.pytest.ini_options]
# durations=0 will display all tests execution time, sorted in ascending order starting from from the slowest one.
# -vv will also display tests with durration = 0.00s
addopts = "--verbose --pyargs --durations=0 --strict-markers"  # always add these arguments to pytest
testpaths = ["./tests"]  # must be an explicit path to avoid importing another "tests" module
# directories to ignore when discovering tests
norecursedirs = [
    "external",
    "examples",
    "docs",
    "scripts",
    "tools",
    "tutorials",
    "*.egg",
    ".*",
    "_darcs",
    "build",
    "CVS",
    "dist",
    "venv",
    "{arch}",
]
# markers to select tests, use `pytest --markers` to see all available markers, `pytest -m "<marker>"` to select tests
markers = [
    "unit: marks unit test, i.e. testing a single, well isolated functionality (deselect with '-m \"not unit\"')",
    "integration: marks test checking the elements when integrated into subsystems (deselect with '-m \"not integration\"')",
    "system: marks test working at the highest integration level (deselect with '-m \"not system\"')",
    "acceptance: marks test checking whether the developed product/model passes the user defined acceptance criteria (deselect with '-m \"not acceptance\"')",
    "docs: mark tests related to documentation (deselect with '-m \"not docs\"')",
    "skipduringci: marks tests that are skipped ci as they are addressed by Jenkins jobs but should be run to test user setups",
    "pleasefixme: marks tests that are broken and need fixing",
]
